{"name":"Preggy","tagline":"preggy is a collection of expectations for python applications, extracted from the pyVows project.","body":"preggy\r\n======\r\n\r\n[![Build Status](https://travis-ci.org/heynemann/preggy.png?branch=master)](https://travis-ci.org/heynemann/preggy)\r\n\r\npreggy is a collection of expectations for python applications, extracted from the pyVows project.\r\n\r\nInstalling\r\n==========\r\n\r\nJust use `pip` to install preggy:\r\n\r\n    pip install preggy\r\n\r\nUsage\r\n=====\r\n\r\nUsing preggy is very simple:\r\n```python\r\nfrom preggy import expect\r\n\r\ndef test_roses_are_red():\r\n    rose = Rose()\r\n    expect(rose.color).to_equal(\"red\")\r\n    \r\ndef test_violets_are_not_red():\r\n    violet = Violet()\r\n    expect(violet.color).not_to_equal(\"red\")\r\n```\r\n\r\nBuilt-in Expectations\r\n=====================\r\n\r\nEquality\r\n--------\r\n\r\n```python\r\nexpect(4).to_equal(4)\r\nexpect(5).Not.to_equal(4)\r\nexpect(5).not_to_equal(4)  # same as previous\r\n```\r\n\r\nSimilarity\r\n----------\r\n\r\n```python\r\nexpect(\"sOmE RandOm     CAse StRiNG\").to_be_like('some random case string')\r\n\r\nexpect(1).to_be_like(1)\r\nexpect(1).to_be_like(1.0)\r\nexpect(1).to_be_like(long(1))\r\n\r\nexpect([1, 2, 3]).to_be_like([3, 2, 1])\r\nexpect([1, 2, 3]).to_be_like((3, 2, 1))\r\nexpect([[1, 2], [3,4]]).to_be_like([4, 3], [2, 1]])\r\n\r\nexpect({ 'some': 1, 'key': 2 }).to_be_like({ 'key': 2, 'some': 1 })\r\n\r\nexpect(\"sOmE RandOm     CAse StRiNG\").Not.to_be_like('other string')\r\nexpect(\"sOmE RandOm     CAse StRiNG\").not_to_be_like('other string')  # same as previous\r\n\r\nexpect(1).not_to_be_like(2)\r\nexpect([[1, 2], [3,4]]).not_to_be_like([4, 4], [2, 1]])\r\nexpect({ 'some': 1, 'key': 2 }).not_to_be_like({ 'key': 3, 'some': 4 })\r\n```\r\n\r\nType\r\n----\r\n```python\r\nexpect(os.path).to_be_a_function()\r\nexpect(1).to_be_numeric()\r\n\r\nexpect(\"some\").Not.to_be_a_function()\r\nexpect(\"some\").Not.to_be_numeric()\r\n```\r\n\r\nTruth\r\n-----\r\n\r\n```python\r\nexpect(True).to_be_true()\r\nexpect(\"some\").to_be_true()\r\nexpect([1, 2, 3]).to_be_true()\r\nexpect({ \"a\": \"b\" }).to_be_true()\r\nexpect(1).to_be_true()\r\n\r\n# while not_to_be_true would work as well, it's just ugly, right?\r\nexpect(False).to_be_false()\r\nexpect(None).to_be_false()\r\nexpect(\"\").to_be_false()\r\nexpect(0).to_be_false()\r\nexpect([]).to_be_false()\r\nexpect({}).to_be_false()\r\n```\r\n\r\nNone\r\n----\r\n\r\n```python\r\nexpect(None).to_be_null()\r\nexpect(\"some\").Not.to_be_null()\r\nexpect(\"some\").not_to_be_null()  # same as previous\r\n```\r\n\r\nInclusion\r\n---------\r\n\r\n```python\r\nexpect([1, 2, 3]).to_include(2)\r\nexpect((1, 2, 3)).to_include(2)\r\nexpect(\"123\").to_include(\"2\")\r\nexpect({ \"a\": 1, \"b\": 2, \"c\": 3}).to_include(\"b\")\r\n\r\nexpect([1, 3]).Not.to_include(2)\r\n```\r\n\r\nRegular Expressions\r\n-------------------\r\n\r\n```python\r\nexpect('some').to_match(r'^[a-z]+')\r\n\r\nexpect(\"Some\").Not.to_match(r'^[a-z]+')\r\n```\r\n\r\nLength\r\n------\r\n\r\n```python\r\nexpect([1, 2, 3]).to_length(3)\r\nexpect((1, 2, 3)).to_length(3)\r\nexpect(\"abc\").to_length(3)\r\nexpect({ \"a\": 1, \"b\": 2, \"c\": 3}).to_length(3)\r\nexpect(lifo_queue).to_length(2)\r\nexpect(queue).to_length(3)\r\n\r\nexpect([1]).Not.to_length(3)\r\nexpect([1]).not_to_length(3)  # same as previous\r\n```\r\n\r\nEmptiness\r\n---------\r\n\r\n```python\r\nexpect([]).to_be_empty()\r\nexpect(tuple()).to_be_empty()\r\nexpect({}).to_be_empty()\r\nexpect(\"\").to_be_empty()\r\n\r\nexpect([1]).not_to_be_empty()\r\nexpect((1,2)).not_to_be_empty()\r\nexpect({\"a\": 1}).not_to_be_empty()\r\nexpect(\"roses are red\").not_to_be_empty()\r\n```\r\n\r\nExceptions\r\n----------\r\n\r\n```python\r\nexpect(RuntimeError()).to_be_an_error() \r\nexpect(RuntimeError()).to_be_an_error_like(RuntimeError)\r\nexpect(ValueError(\"error\")).to_have_an_error_message_of(\"error\")\r\n\r\nexpect(\"I'm not an error\").Not.to_be_an_error()\r\nexpect(ValueError()).Not.to_be_an_error_like(RuntimeError)\r\nexpect(ValueError(\"some\")).Not.to_have_an_error_message_of(\"error\")\r\n```\r\n\r\nLicense\r\n=======\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2013 Bernardo Heynemann <heynemann@gmail.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}